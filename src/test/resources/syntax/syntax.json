{
    "additionalItems": [
        {
            "schema": {
                "additionalItems": true
            },
            "valid": true
        },
        {
            "schema": {
                "additionalItems": {}
            },
            "valid": true
        },
        {
            "schema": {
                "additionalItems": "no"
            },
            "valid": false,
            "messages": [
                "# [schema:additionalItems]: field has wrong type string, expected one of [boolean, object]"
            ]
        }
    ],
    "additionalProperties": [
        {
            "schema": {
                "additionalProperties": true
            },
            "valid": true
        },
        {
            "schema": {
                "additionalProperties": {}
            },
            "valid": true
        },
        {
            "schema": {
                "additionalProperties": [ 1, 2, 3 ]
            },
            "valid": false,
            "messages": [
                "# [schema:additionalProperties]: field has wrong type array, expected one of [boolean, object]"
            ]
        }
    ],
    "dependencies": [
        {
            "schema": {
                "dependencies": {
                    "a": "b",
                    "c": {
                        "type": [ "string", "boolean" ]
                    },
                    "xx": [ "a", "b", "c" ]
                }
            },
            "valid": true
        },
        {
            "schema": {
                "dependencies": false
            },
            "valid": false,
            "messages": [
                "# [schema:dependencies]: field has wrong type boolean, expected one of [object]"
            ]
        },
        {
            "schema": {
                "dependencies": {
                    "a": 3,
                    "b": [ {} ]
                }
            },
            "valid": false,
            "messages": [
                "# [schema:dependencies]: field \"a\": illegal value of type integer",
                "# [schema:dependencies]: field \"b\": array element 0 has wrong type object, expected a property name"
            ]
        }
    ],
    "description": [
        {
            "schema": {
                "description": "hello"
            },
            "valid": true
        },
        {
            "schema": {
                "description": 3.24
            },
            "valid": false,
            "messages": [
                "# [schema:description]: field has wrong type number, expected one of [string]"
            ]
        }
    ],
    "disallow": [
        {
            "schema": {
                "disallow": "string"
            },
            "valid": true
        },
        {
            "schema": {
                "disallow": "any"
            },
            "valid": true
        },
        {
            "schema": {
                "disallow": [ "boolean", { "$ref": "#/schema2" } ]
            },
            "valid": true
        },
        {
            "schema": {
                "disallow": false
            },
            "valid": false,
            "messages": [
                "# [schema:disallow]: field has wrong type boolean, expected one of [array, string]"
            ]
        },
        {
            "schema": {
                "disallow": "hammer"
            },
            "valid": false,
            "messages": [
                "# [schema:disallow]: unknown simple type hammer"
            ]
        },
        {
            "schema": {
                "disallow": [ null, "boolean", {}, []]
            },
            "valid": false,
            "messages": [
                "# [schema:disallow]: array element 0: element has wrong type null (expected a simple type or a schema)",
                "# [schema:disallow]: array element 3: element has wrong type array (expected a simple type or a schema)"
            ]
        }
    ],
    "divisibleBy": [
        {
            "schema": {
                "divisibleBy": 3
            },
            "valid": true
        },
        {
            "schema": {
                "divisibleBy": 0.0
            },
            "valid": false,
            "messages": [
                "# [schema:divisibleBy]: divisor is 0"
            ]
        },
        {
            "schema": {
                "divisibleBy": "anything"
            },
            "valid": false,
            "messages": [
                "# [schema:divisibleBy]: field has wrong type string, expected one of [integer, number]"
            ]
        }
    ],
    "$ref": [
        {
            "schema": {
                "$ref": "#"
            },
            "valid": true
        },
        {
            "schema": {
                "$ref": "http://json-schema.org/schema/v3#/a/b"
            },
            "valid": true
        },
        {
            "schema": {
                "$ref": false
            },
            "valid": false,
            "messages": [
                "# [schema:$ref]: field has wrong type boolean, expected one of [string]"
            ]
        },
        {
            "schema": {
                "$ref": "+23:"
            },
            "valid": false,
            "messages": [
                "# [schema:$ref]: not a valid URI"
            ]
        }
    ],
    "enum": [
        {
            "schema": {
                "enum": []
            },
            "valid": true
        },
        {
            "schema": {
                "enum": 1
            },
            "valid": false,
            "messages": [
                "# [schema:enum]: field has wrong type integer, expected one of [array]"
            ]
        }
    ],
    "exclusiveMaximum": [
        {
            "schema": {
                "maximum": 3,
                "exclusiveMaximum": false
            },
            "valid": true
        },
        {
            "schema": {
                "maximum": 3,
                "exclusiveMaximum": "no"
            },
            "valid": false,
            "messages": [
                "# [schema:exclusiveMaximum]: field has wrong type string, expected one of [boolean]"
            ]
        },
        {
            "schema": {
                "exclusiveMaximum": true
            },
            "valid": false,
            "messages": [
                "# [schema:exclusiveMaximum]: exclusiveMaximum without maximum"
            ]
        }
    ],
    "exclusiveMinimum": [
        {
            "schema": {
                "minimum": 3,
                "exclusiveMinimum": false
            },
            "valid": true
        },
        {
            "schema": {
                "minimum": 3,
                "exclusiveMinimum": "no"
            },
            "valid": false,
            "messages": [
                "# [schema:exclusiveMinimum]: field has wrong type string, expected one of [boolean]"
            ]
        },
        {
            "schema": {
                "exclusiveMinimum": true
            },
            "valid": false,
            "messages": [
                "# [schema:exclusiveMinimum]: exclusiveMinimum without minimum"
            ]
        }
    ],
    "extends": [
        {
            "schema": {
                "extends": {
                    "type": "string"
                }
            },
            "valid": true
        },
        {
            "schema": {
                "extends": [{"what": "ever"}, {"you": "want"}, {}]
            },
            "valid": true
        },
        {
            "schema": {
                "extends": 42
            },
            "valid": false,
            "messages": [
                "# [schema:extends]: field has wrong type integer, expected one of [array, object]"
            ]
        },
        {
            "schema": {
                "extends": [ 1, true, {}, "boo" ]
            },
            "valid": false,
            "messages": [
                "# [schema:extends]: array element 0 has wrong type integer (expected a schema)",
                "# [schema:extends]: array element 1 has wrong type boolean (expected a schema)",
                "# [schema:extends]: array element 3 has wrong type string (expected a schema)"
            ]
        }
    ],
    "format": [
        {
            "schema": {
                "format": "date-time"
            },
            "valid": true
        },
        {
            "schema": {
                "format": {}
            },
            "valid": false,
            "messages": [
                "# [schema:format]: field has wrong type object, expected one of [string]"
            ]
        }
    ],
    "id": [
        {
            "schema": {
                "id": "#"
            },
            "valid": true
        },
        {
            "schema": {
                "id": "http://json-schema.org/schema/v3#/a/b"
            },
            "valid": true
        },
        {
            "schema": {
                "id": false
            },
            "valid": false,
            "messages": [
                "# [schema:id]: field has wrong type boolean, expected one of [string]"
            ]
        },
        {
            "schema": {
                "id": "+23:"
            },
            "valid": false,
            "messages": [
                "# [schema:id]: not a valid URI"
            ]
        }
    ],
    "items": [
        {
            "schema": {
                "items": {}
            },
            "valid": true
        },
        {
            "schema": {
                "items": [{}, {}]
            },
            "valid": true
        },
        {
            "schema": {
                "items": null
            },
            "valid": false,
            "messages": [
                "# [schema:items]: field has wrong type null, expected one of [array, object]"
            ]
        },
        {
            "schema": {
                "items": [ {}, 5, true]
            },
            "valid": false,
            "messages": [
                "# [schema:items]: array element 1 has wrong type integer (expected a schema)",
                "# [schema:items]: array element 2 has wrong type boolean (expected a schema)"
            ]
        }
    ],
    "maximum": [
        {
            "schema": {
                "maximum": 30
            },
            "valid": true
        },
        {
            "schema": {
                "maximum": -64.23114
            },
            "valid": true
        },
        {
            "schema": {
                "maximum": "unbounded"
            },
            "valid": false,
            "messages": [
                "# [schema:maximum]: field has wrong type string, expected one of [integer, number]"
            ]
        }
    ],
    "maxItems": [
        {
            "schema": {
                "maxItems": 20
            },
            "valid": true
        },
        {
            "schema": {
                "maxItems": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "# [schema:maxItems]: value is too large"
            ]
        },
        {
            "schema": {
                "maxItems": -33
            },
            "valid": false,
            "messages": [
                "# [schema:maxItems]: value is negative"
            ]
        },
        {
            "schema": {
                "maxItems": 3.1
            },
            "valid": false,
            "messages": [
                "# [schema:maxItems]: field has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "maxLength": [
        {
            "schema": {
                "maxLength": 20
            },
            "valid": true
        },
        {
            "schema": {
                "maxLength": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "# [schema:maxLength]: value is too large"
            ]
        },
        {
            "schema": {
                "maxLength": -33
            },
            "valid": false,
            "messages": [
                "# [schema:maxLength]: value is negative"
            ]
        },
        {
            "schema": {
                "maxLength": 3.1
            },
            "valid": false,
            "messages": [
                "# [schema:maxLength]: field has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "minimum": [
        {
            "schema": {
                "minimum": 30
            },
            "valid": true
        },
        {
            "schema": {
                "minimum": -64.23114
            },
            "valid": true
        },
        {
            "schema": {
                "minimum": "unbounded"
            },
            "valid": false,
            "messages": [
                "# [schema:minimum]: field has wrong type string, expected one of [integer, number]"
            ]
        }
    ],
    "minItems": [
        {
            "schema": {
                "minItems": 20
            },
            "valid": true
        },
        {
            "schema": {
                "minItems": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "# [schema:minItems]: value is too large"
            ]
        },
        {
            "schema": {
                "minItems": -33
            },
            "valid": false,
            "messages": [
                "# [schema:minItems]: value is negative"
            ]
        },
        {
            "schema": {
                "minItems": 3.1
            },
            "valid": false,
            "messages": [
                "# [schema:minItems]: field has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "minLength": [
        {
            "schema": {
                "minLength": 20
            },
            "valid": true
        },
        {
            "schema": {
                "minLength": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "# [schema:minLength]: value is too large"
            ]
        },
        {
            "schema": {
                "minLength": -33
            },
            "valid": false,
            "messages": [
                "# [schema:minLength]: value is negative"
            ]
        },
        {
            "schema": {
                "minLength": 3.1
            },
            "valid": false,
            "messages": [
                "# [schema:minLength]: field has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "patternProperties": [
        {
            "schema": {
                "patternProperties": {
                    "a+": {},
                    "z/": {}
                }
            },
            "valid": true
        },
        {
            "schema": {
                "patternProperties": {
                    "a++": {},
                    "^[a-zA-Z\\d]+$": false
                }
            },
            "valid": false,
            "messages": [
                "# [schema:patternProperties]: field \"^[a-zA-Z\\d]+$\": value has wrong type boolean (expected a schema)",
                "# [schema:patternProperties]: field \"a++\": regex is invalid"
            ]
        },
        {
            "schema": {
                "patternProperties": 2
            },
            "valid": false,
            "messages": [
                "# [schema:patternProperties]: field has wrong type integer, expected one of [object]"
            ]
        }
    ],
    "pattern": [
        {
            "schema": {
                "pattern": "a+"
            },
            "valid": true
        },
        {
            "schema": {
                "pattern": "f*+"
            },
            "valid": false,
            "messages": [
                "# [schema:pattern]: invalid regex f*+"
            ]
        },
        {
            "schema": {
                "pattern": [1, 2, 3]
            },
            "valid": false,
            "messages": [
                "# [schema:pattern]: field has wrong type array, expected one of [string]"
            ]
        }
    ],
    "properties": [
        {
            "schema": {
                "properties": {
                    "p1": {}
                }
            },
            "valid": true
        },
        {
            "schema": {
                "properties": null
            },
            "valid": false,
            "messages": [
                "# [schema:properties]: field has wrong type null, expected one of [object]"
            ]
        }
    ],
    "title": [
        {
            "schema": {
                "title": "a day in hell"
            },
            "valid": true
        },
        {
            "schema": {
                "title": 42.3
            },
            "valid": false,
            "messages": [
                "# [schema:title]: field has wrong type number, expected one of [string]"
            ]
        }
    ],
    "type": [
        {
            "schema": {
                "type": "string"
            },
            "valid": true
        },
        {
            "schema": {
                "type": "any"
            },
            "valid": true
        },
        {
            "schema": {
                "type": [ "boolean", { "$ref": "#/schema2" } ]
            },
            "valid": true
        },
        {
            "schema": {
                "type": false
            },
            "valid": false,
            "messages": [
                "# [schema:type]: field has wrong type boolean, expected one of [array, string]"
            ]
        },
        {
            "schema": {
                "type": "hammer"
            },
            "valid": false,
            "messages": [
                "# [schema:type]: unknown simple type hammer"
            ]
        },
        {
            "schema": {
                "type": [ 42, "boolean", "pwet", {} ]
            },
            "valid": false,
            "messages": [
                "# [schema:type]: array element 0: element has wrong type integer (expected a simple type or a schema)",
                "# [schema:type]: array element 2: unknown simple type pwet"
            ]
        }
    ],
    "uniqueItems": [
        {
            "schema": {
                "uniqueItems": true
            },
            "valid": true
        },
        {
            "schema": {
                "uniqueItems": "yes please"
            },
            "valid": false,
            "messages": [
                "# [schema:uniqueItems]: field has wrong type string, expected one of [boolean]"
            ]
        }
    ]
}
